name: TikTok NBA Script Generator

on:
  workflow_dispatch: # Allows manual triggering
  schedule:
    - cron: '0 12 * * *'  # Run daily at 12 PM UTC

permissions:
  contents: write

jobs:
  generate-tiktok-script:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: pip install requests beautifulsoup4 edge-tts nest_asyncio pillow
    
    - name: Create source directory and clean old files
      run: |
        mkdir -p source
        echo "Checking for existing files to replace..."
        if [ -f "source/headline.txt" ]; then
          echo "Removing existing headline.txt"
          rm "source/headline.txt"
        fi
        if [ -f "source/script.txt" ]; then
          echo "Removing existing script.txt"
          rm "source/script.txt"
        fi
        if [ -f "source/image.jpg" ]; then
          echo "Removing existing image.jpg"
          rm "source/image.jpg"
        fi
        if [ -f "source/voiceover.mp3" ]; then
          echo "Removing existing voiceover.mp3"
          rm "source/voiceover.mp3"
        fi
        echo "Ready to generate new files..."
    
    - name: Generate TikTok Script and files
      run: |
        python3 - <<EOF
        import requests
        from bs4 import BeautifulSoup
        import json
        import asyncio
        import edge_tts
        import nest_asyncio
        from PIL import Image
        import io
        import os
        import urllib.parse

        # Allow async in some environments
        nest_asyncio.apply()

        # Scraper for NBA article
        def scrape_nba_news(url):
            headers = {'User-Agent': 'Mozilla/5.0'}
            try:
                response = requests.get(url, headers=headers)
                soup = BeautifulSoup(response.text, 'html.parser')

                # Headline
                h1 = soup.find('header', class_='entry-header')
                headline = h1.find('h1').get_text(strip=True) if h1 else 'No headline found'

                # Article content
                content_div = soup.find('div', class_='entry-content')
                article_text = content_div.get_text(separator=' ', strip=True) if content_div else 'No content found'

                # Image URL
                og_image = soup.find('meta', property='og:image')
                img_url = og_image['content'] if og_image and og_image.has_attr('content') else 'No image found'

                return headline, article_text, img_url
            except Exception as e:
                print(f'Error scraping: {e}')
                return None, None, None

        # Fallback script generator for when API fails
        def generate_fallback_script(headline, article_content):
            print("🔄 Using fallback script template...")
            
            # Extract key words from headline for more dynamic content
            headline_words = headline.lower().split()
            
            if any(word in headline_words for word in ['trade', 'traded', 'deal']):
                return f"Alright NBA fans, big trade news just dropped, {headline[:80]}, this is exactly what we have been waiting for, the league is getting more competitive, and honestly this move makes total sense, what do you think about this trade, comment below and let me know your thoughts."
            elif any(word in headline_words for word in ['sign', 'signed', 'contract']):
                return f"NBA contract update everyone, so {headline[:80]}, and I have to say this is pretty interesting, the front office is making moves, this could change everything for the season, definitely keeps things exciting, what is your prediction."
            elif any(word in headline_words for word in ['injury', 'injured', 'hurt']):
                return f"NBA injury update, {headline[:80]}, and this is tough news for the team, hopefully they can bounce back strong, the depth will be tested now, what do you think about their chances moving forward."
            elif any(word in headline_words for word in ['lebron', 'james', 'pursue']):
                return f"Yo NBA fans, LeBron James news alert, {headline[:80]}, and this is absolutely massive for the league, teams are already planning their moves, the King still got that pull, what team do you think would be the best fit for him, drop your thoughts below."
            else:
                return f"Breaking NBA news, {headline[:80]}, and wow this is huge for the franchise, they are building something special here, the chemistry is going to be amazing, I cannot wait to see how this plays out, drop your reactions in the comments."

        # AI generation for TTS-friendly script using correct Pollinations GET API
        def generate_tiktok_script(headline, article_content):
            prompt = f"""You are writing a TikTok NBA commentary script for a text-to-speech voice.

CRITICAL TTS RULES for perfect natural speech:
- Write like you are having an excited conversation with a friend
- Add commas when you would naturally take a breath while speaking
- Use commas to separate different thoughts or topics
- Add commas after team names when transitioning to what they did
- Put commas before "but", "and", "so" when connecting major ideas
- Do not overdo it - aim for 2-4 word groups between most commas
- NO periods, colons, dashes, or any punctuation except commas and ONE period at the very end
- Instead of "grade: B" say "I give them a B" or "that is a solid B grade"
- NO symbols like colons, dashes, hyphens - only words and commas
- Sound enthusiastic and natural, not robotic or rushed
- Be under 60 seconds when spoken

NBA Headline: {headline}

Article Info: {article_content}

Write with natural speech rhythm and spell out grades naturally. NO colons, dashes, or symbols - just words and commas. Output just the script."""

            try:
                print("Generating script with Pollinations API...")
                encoded_prompt = urllib.parse.quote(prompt)
                url = f"https://text.pollinations.ai/{encoded_prompt}"
                
                headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'}
                response = requests.get(url, headers=headers, timeout=30)
                
                if response.status_code == 200:
                    script = response.text.strip()
                    print("✅ Script generated successfully")
                    return script
                else:
                    print(f"❌ API returned status code: {response.status_code}")
                    return generate_fallback_script(headline, article_content)
                    
            except Exception as e:
                print(f"❌ API error: {e}")
                return generate_fallback_script(headline, article_content)

        # Download and save image with better error handling
        def download_image(img_url, output_path):
            try:
                if img_url == 'No image found' or not img_url:
                    print("No image URL provided")
                    return False
                
                headers = {'User-Agent': 'Mozilla/5.0'}
                response = requests.get(img_url, headers=headers, timeout=15)
                response.raise_for_status()
                
                # Open and save image as JPG
                image = Image.open(io.BytesIO(response.content))
                # Convert to RGB if necessary (for JPG format)
                if image.mode in ('RGBA', 'P'):
                    image = image.convert('RGB')
                image.save(output_path, 'JPEG', quality=90)
                return True
            except Exception as e:
                print(f'Error downloading image: {e}')
                return False

        # Save to MP3 with Edge TTS
        async def save_script_to_voice(script_text, voice='en-US-GuyNeural', output_path='source/voiceover.mp3'):
            try:
                communicate = edge_tts.Communicate(script_text, voice)
                await communicate.save(output_path)
            except Exception as e:
                print(f'Error generating TTS: {e}')

        # Main function with better error handling
        async def main():
            url = 'https://www.basketballinsiders.org/news/warriors-cavaliers-mavericks-expected-to-pursue-lebron-james-in-2026/'
            
            print(f"Scraping article from: {url}")
            headline, article_content, img_url = scrape_nba_news(url)

            if not headline or headline == 'No headline found':
                print('❌ Failed to scrape article. Using fallback content.')
                headline = 'NBA Trade Rumors and Updates'
                article_content = 'Latest NBA news and trade discussions from around the league.'

            print(f'📰 Headline: {headline}')
            print()

            script = generate_tiktok_script(headline, article_content)
            print('🎬 TTS-Friendly TikTok Voiceover Script:')
            print()
            print(script)
            print()
            print(f'🖼️ Image URL: {img_url}')

            # Save headline to file
            try:
                with open('source/headline.txt', 'w', encoding='utf-8') as f:
                    f.write(headline)
                print('✅ Headline saved to source/headline.txt')
            except Exception as e:
                print(f'❌ Error saving headline: {e}')

            # Save generated script to file
            try:
                with open('source/script.txt', 'w', encoding='utf-8') as f:
                    f.write(script)
                print('✅ Script saved to source/script.txt')
            except Exception as e:
                print(f'❌ Error saving script: {e}')

            # Download and save image
            image_saved = download_image(img_url, 'source/image.jpg')
            if image_saved:
                print('✅ Image saved to source/image.jpg')
            else:
                print('⚠️ Image could not be saved')

            # Generate TTS voiceover
            print()
            print('🔊 Generating voiceover MP3 with Edge TTS...')
            await save_script_to_voice(script, voice='en-US-GuyNeural', output_path='source/voiceover.mp3')
            print('✅ Voiceover saved to source/voiceover.mp3')

        # Run script
        try:
            asyncio.run(main())
        except Exception as e:
            print(f'❌ Critical error: {e}')
            exit(1)
        EOF

    - name: Set up Git identity
      run: |
        git config --global user.name "cowboycode9"
        git config --global user.email "cowboycode9@outlook.com"

    - name: Commit and push generated files
      env:
        GH_PAT: ${{ secrets.GH_PAT }}
      run: |
        git stash --include-untracked
        git pull origin main --rebase || echo "Warning: rebase skipped"
        git stash pop || true

        git add source/
        timestamp=$(TZ="UTC" date +"%Y-%m-%d %H:%M:%S UTC")
        git commit -m "Generated TikTok NBA script and assets: ${timestamp}" || echo "No changes to commit"
        git push https://x-access-token:${GH_PAT}@github.com/${{ github.repository }}.git HEAD:main
